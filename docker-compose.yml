version: '3'
services:
  postgresql:
    image: postgres:latest
    container_name: postgresql
    restart: unless-stopped
    ports:
      - "${ORDER_DB_PORT}:${ORDER_DB_PORT}"
    environment:
      - POSTGRES_USER=${ORDER_DB_USER}
      - POSTGRES_PASSWORD=${ORDER_DB_PASSWORD}
      - POSTGRES_DB=${ORDER_DB_NAME}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lessons-network
#    volumes:
#      - habrdb-data:/var/lib/postgresql/data
  answer-engine-postgresql:
    image: postgres:latest
    container_name: postgresql-answer
    restart: unless-stopped
#    ports:
#      - "5433:5432"
    environment:
      - POSTGRES_USER=${ANSWER_DB_USER}
      - POSTGRES_PASSWORD=${ANSWER_DB_PASSWORD}
      - POSTGRES_DB=${ANSWER_DB_NAME}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lessons-network
#    volumes:
#      - habrdb-data-answer-engine:/var/lib/postgresql/data
  migrations:
    image: liquibase/liquibase:latest
    volumes:
      - ./services/order_service/migrations:/app
    command: --defaultsFile=/app/order.properties update
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - lessons-network
  migrations-answer-engine:
    image: liquibase/liquibase:latest
    volumes:
      - ./services/AnswerEngine/migrations:/app
    command: --defaultsFile=/app/answer.properties update
#    depends_on:
#      postgresql:
#        condition: service_healthy
    networks:
      - lessons-network
  order-service:
    container_name: "lessons-order-service"
    build:
      context: services/order_service
      dockerfile: internal/orders.dockerfile
    ports:
      - "${ORDER_SERVER_PORT}:${ORDER_SERVER_PORT}"
    environment:
      - DB_USER=${ORDER_DB_USER}
      - DB_PASSWORD=${ORDER_DB_PASSWORD}
      - DB_NAME=${ORDER_DB_NAME}
      - DB_PORT=${ORDER_DB_PORT}
      - DB_HOST=${ORDER_DB_HOST}
      - SERVER_PORT=${ORDER_SERVER_PORT}
      - BOT_TOKEN=${BOT_TOKEN}
      - MQ_USER=${MQ_USER}
      - MQ_PASS=${MQ_PASS}
      - MQ_HOST=${MQ_HOST}
      - MQ_PORT=${MQ_PORT}
    depends_on:
      postgresql:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    networks:
      - lessons-network
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${MQ_PORT}:${MQ_PORT}"
      - "${MQ_UI_PORT}:${MQ_UI_PORT}"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      RABBITMQ_USER: ${MQ_USER}
      RABBITMQ_PASS: ${MQ_PASS}
    networks:
      - lessons-network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
  answer_engine_fastapi:
    container_name: "lessons-answer-engine"
    build:
      context: services/AnswerEngine
      dockerfile: src/bot.dockerfile
    ports:
      - "${ANSWER_SERVER_PORT}:${ANSWER_SERVER_PORT}"
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - FQND_HOST=${FQND_HOST}
      
    networks:
      - lessons-network
    depends_on:
      rabbitmq:
        condition: service_healthy

volumes: # Volume только вручную!!!!!!
  habrdb-data:
  rabbitmq_data:
  habrdb-data-answer-engine:

networks:
  lessons-network:
    name: "lessons-network"
