@startuml c4_containers
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!include DEVICONS/go.puml
!include DEVICONS/python.puml
!include DEVICONS/postgresql.puml
!include <cloudinsight/kafka>

title Архитектура платформы для репетиторов (только репетитор)

' Пользователь
Person(Teacher, "Репетитор", "Пользователь, предлагающий услуги обучения")

' Интерфейс
Container(TeacherApp, "Приложение для репетиторов", "Telegram Mini App", "Интерфейс для управления профилем и заказами")

' Основные микросервисы
Container(main_service, "Главный сервис", "Go", "Регистрация, аутентификация, управление пользователями", "go")
Container(order_service, "Сервис заказов", "Go", "Управление заказами (принятие, отклонение)", "go")
Container(notification_service, "Сервис уведомлений", "Python", "Уведомления о статусах заказов", "python")

' Базы данных
ContainerDb(UserDB, "users_postgres", "Postgres", "Хранение данных пользователей", "postgresql")
ContainerDb(OrderDB, "orders_postgres", "Postgres", "Хранение данных заказов", "postgresql")
ContainerQueue(NotificationQueue, "notifications_topic", "kafka", "Очередь для уведомлений", "kafka")

' Связи
Rel(Teacher, TeacherApp, "Управление профилем, управление заказами")
Rel(TeacherApp, main_service, "Регистрация и авторизация", "REST")
Rel(TeacherApp, order_service, "Управление заказами", "REST")
Rel(main_service, UserDB, "Хранение данных пользователей")
Rel(order_service, OrderDB, "Хранение данных заказов")
Rel(order_service, notification_service, "Уведомление об изменениях статуса", "gRPC")
Rel(notification_service, NotificationQueue, "Отправка уведомлений в очередь", "Kafka")
Rel(notification_service, TeacherApp, "Отправка уведомлений репетиторам")
@enduml
