@startuml c4_containers
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!include DEVICONS/go.puml
!include DEVICONS/python.puml
!include DEVICONS/postgresql.puml
!include <cloudinsight/kafka>

title Архитектура Lessons (Сервисный уровень)

' Пользователь
Person(tutor, "Репетитор", "")
Person(student, "Ученик", "")

' Интерфейс
Container(LessonsBot, "Телеграмм бот", "Telegram Bot", "Чат с ботом для учеников")
Container(TutorsBot, "Телеграмм бот для репетиторов", "Telegram Bot", "Чат с ботом для репетиторов")

Container(TutorApp, "Приложение для репетиторов", "Telegram Mini App", "Интерфейс для управления профилем и заказами")
Container(LessonsApp, "Приложение для учеников", "Telegram Mini App", "Интерфейс для создания заказов")

' Основные микросервисы
Container(order_service, "Сервис заказов", "Go", "Управление заказами (принятие, отклонение)", "go")
Container(answer_engine_service, "Сервис обработки заказов и уведомлений, бот", "Python", ".", "python")
Container(tutors_service, "Сервис хранения информации о репетиторе (биография, отзывы)", "Go", ".", "go")
'Container(review_service, "Сервис хранения отзывов", "Go", ".", "go")
'Container(telegram_bot, "Сервис хранения отзывов", "Go", ".", "go")

' Брокер сообщений
ContainerQueue(NotificationQueue, "notifications_topic", "kafka", "Очередь для уведомлений", "kafka")

' Базы данных
ContainerDb(OrderDB, "orders_postgres", "Postgres", "Хранение данных заказов", "postgresql")
ContainerDb(AnswersDB, "answer_postgres", "Postgres", "Хранение данных состояния заказа", "postgresql")
ContainerDb(TutorsDB, "tutors_postgres", "Postgres", "Хранение данных о репетиторе", "postgresql")

' Связи
Rel(tutor, TutorsBot, "Открыть приложение")
Rel(TutorsBot, tutor, "получить уведомление")
Rel(tutor, TutorApp, "Управление профилем, управление заказами")

Rel(student, LessonsBot, "Открыть приложение")
Rel(LessonsBot, student, "получить уведомление")

Rel(student, LessonsApp, "Создание заказов, просмотр откликов")

Rel(TutorApp, order_service, "Просмотр/отклик на заказ", "REST")
Rel(LessonsApp, order_service, "Создание/Просмотр заказа", "REST")

Rel(order_service, NotificationQueue, "Пишет в топик информацию о создании заказа и отклике")

Rel(answer_engine_service, NotificationQueue, "Читает событие из топика")
' answer_engine_service
Rel(order_service, OrderDB, "Хранение данных заказов")
Rel(answer_engine_service, AnswersDB, "Хранение данных заказов")

Rel(answer_engine_service, TutorsBot, "уведомляет о новом заказе")
Rel(answer_engine_service, LessonsBot, "уведомляет об отклике")

Rel(TutorApp, tutors_service, "Изменить информацию о себе")
Rel(LessonsApp, tutors_service, "Оставить отзыв")

Rel(tutors_service, TutorsDB, "Хранение данных о репетиторе")
'
'Rel(order_service, notification_service, "Уведомление об изменениях статуса", "gRPC")
'Rel(notification_service, NotificationQueue, "Отправка уведомлений в очередь", "Kafka")
'Rel(notification_service, TutorApp, "Отправка уведомлений репетиторам")
@enduml
