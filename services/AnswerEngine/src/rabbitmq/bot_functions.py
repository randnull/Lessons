from typing import List

from AnswerEngine.src.TelegramBot.botStudent import bot_student
from AnswerEngine.src.TelegramBot.botTutor import bot_tutor
from AnswerEngine.src.TelegramBot.keyboards.keyboards import suggest_keyboard
from AnswerEngine.src.logger.logger import logger
from AnswerEngine.src.models.dao_table.dao import OrderStatus
from AnswerEngine.src.models.dto_table.dto import NewOrderDto, ResponseDto, SuggestDto, SelectedDto, \
    ReviewDto, OrderDto, AddResponseDto

from AnswerEngine.src.config.settings import settings


async def proceed_order(order_create: NewOrderDto) -> None:
    messageWaiting = (
        f"<b>–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: {order_create.order_name}!</b>\n\n"
        "üì© <i>–ó–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</i>"
    )

    messageNew = (
        f"<b>üéâ –ó–∞–∫–∞–∑: {order_create.order_name} –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!\n\n</b>"
        "üì© <i>–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.</i>"
    )

    message = messageWaiting if order_create.status == OrderStatus.WAITING else messageNew

    try:
        await bot_student.send_message(chat_id=str(order_create.student_id), text=message, parse_mode="html")
        logger.info(f"[NOTIFY-STUDENT] order {order_create.order_id} create to user {order_create.student_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-STUDENT] order {order_create.order_id} create to user {order_create.student_id} failed!. Error: {ex}")


async def proceed_order_to_tutors(order_create: NewOrderDto, tutors_id: List[int]) -> None:
    message = (
        f"<b>–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—à–∏–º —Ç–µ–≥–∞–º: {order_create.order_name}!</b>\n\n"
    )

    for tutor_id in tutors_id:
        try:
            await bot_tutor.send_message(chat_id=str(tutor_id), text=message, parse_mode="html", reply_markup=suggest_keyboard(order_create.order_id))
            logger.info(f"[NOTIFY-TUTOR] order {order_create.order_id} create to user {tutor_id} send!")
        except Exception as ex:
            logger.error(f"[NOTIFY-TUTOR] order {order_create.order_id} create to user {tutor_id} failed!. Error: {ex}")


async def proceed_response(response: ResponseDto) -> None:
    messageStudent = (
        f"<b>–£ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ \"{response.order_name}\" –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫!</b>\n\n"
        "üëÄ <i>–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫ –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.</i>\n\n"
        f"‚ö†Ô∏è <i>–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç –æ–ø–ª–∞—Ç—É –≤–ø–µ—Ä–µ–¥ –∑–∞–Ω—è—Ç–∏—è, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {settings.SUPPORT_CHANNEL}!</i>"
        f"‚ö†Ô∏è <i>–ú—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–ø–µ—Ä–µ–¥ –∑–∞–Ω—è—Ç–∏–π!</i>"
    )

    messageTutor = (
        f"<b>–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑ \"{response.order_name}\"!</b>\n\n"
        "‚úÖ <i>–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.</i>"
    )

    try:
        await bot_student.send_message(chat_id=response.student_id, text=messageStudent, parse_mode="html")
        logger.info(f"[NOTIFY-STUDENT] response: {response.response_id} to user: {response.student_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-STUDENT] response: {response.response_id} to user: {response.student_id} failed!. Error: {ex}")

    try:
        await bot_tutor.send_message(chat_id=response.tutor_id, text=messageTutor, parse_mode="html")
        logger.info(f"[NOTIFY-TUTOR] response: {response.response_id} to user: {response.tutor_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-TUTOR] response: {response.response_id} to user: {response.tutor_id} failed!. Error: {ex}")

async def proceed_selected(selected_order: SelectedDto) -> None:
    messageStudent = (
        f"<b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–∞ –∑–∞–∫–∞–∑ \"{selected_order.order_name}\"!</b>\n\n"
        "üëÄ <i>–•–æ—Ä–æ—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π!</i>"
    )

    messageTutor = (
        f"<b>–í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–∞ –∑–∞–∫–∞–∑ \"{selected_order.order_name}\"!</b>\n\n"
        "‚úÖ <i>–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π!</i>"
    )

    try:
        await bot_student.send_message(chat_id=selected_order.student_telegram_id, text=messageStudent, parse_mode="html")
        logger.info(f"[NOTIFY-STUDENT] selected: {selected_order.response_id} to user: {selected_order.student_telegram_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-STUDENT] selected: {selected_order.response_id} to user: {selected_order.student_telegram_id} failed!. Error: {ex}")

    try:
        await bot_tutor.send_message(chat_id=selected_order.tutor_telegram_id, text=messageTutor, parse_mode="html")
        logger.info(f"[NOTIFY-TUTOR] selected: {selected_order.response_id} to user: {selected_order.tutor_telegram_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-TUTOR] selected: {selected_order.response_id} to user: {selected_order.tutor_telegram_id} failed!. Error: {ex}")


async def proceed_suggest(suggest_order: SuggestDto) -> None:
    message = (
        f"<b>–£—á–µ–Ω–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –∑–∞–∫–∞–∑: {suggest_order.order_name}</b>\n\n"
        f"üëÄ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {suggest_order.description}\n\n"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {suggest_order.min_price} - {suggest_order.max_price}\n\n"
        "‚ö° <i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
    )

    tutor_id = suggest_order.tutor_telegram_id

    try:
        await bot_tutor.send_message(chat_id=tutor_id, text=message, parse_mode="html", reply_markup=suggest_keyboard(suggest_order.order_id))
        logger.info(f"[NOTIFY-TUTOR] suggest order: {suggest_order.order_id} to user: {suggest_order.tutor_telegram_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-TUTOR] suggest order: {suggest_order.order_id} to user: {suggest_order.tutor_telegram_id} failed!. Error: {ex}!")

async def proceed_review(new_review: ReviewDto) -> None:
    message = (
        f"<b>–£—á–µ–Ω–∏–∫ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –ø–æ –∑–∞–∫–∞–∑—É: {new_review.order_name}</b>\n\n"
        f"<b>–ï—Å–ª–∏ –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Å —É—á–µ–Ω–∏–∫–æ–º - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è!</b>\n\n"
    )

    try:
        await bot_tutor.send_message(chat_id=new_review.tutor_telegram_id, text=message, parse_mode="html")
        logger.info(f"[NOTIFY-TUTOR] approved review: {new_review.order_id} to user: {new_review.tutor_telegram_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-TUTOR] approved review: {new_review.order_id} to user: {new_review.tutor_telegram_id} failed!. Error: {ex}!")

async def proceed_need_review(order: OrderDto) -> None:
    message = (
        f"<b>–í—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –ø–æ –∑–∞–∫–∞–∑—É: {order.order_name}?</b>\n\n"
        "üì© <i>–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –±—É–¥–µ—Ç —Ä–∞–¥ —É–∑–Ω–∞—Ç—å –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è!</i>"
    )

    try:
        await bot_student.send_message(chat_id=str(order.student_id), text=message, parse_mode="html")
        logger.info(f"[NOTIFY-STUDENT] order {order.order_id} need_review to user {order.student_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-STUDENT] order {order.order_id} need_review to user {order.student_id} failed!. Error: {ex}")

async def proceed_add_response(add_response: AddResponseDto) -> None:
    message = (
        f"<b>üéâ–í–∞–º –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–∫–ª–∏–∫–∏.</b>\n\n"
        f"<i>–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {add_response.response_count}</i>"
    )

    try:
        await bot_tutor.send_message(chat_id=str(add_response.tutor_telegram_id), text=message, parse_mode="html")
        logger.info(f"[NOTIFY-TUTOR] add response message to user {add_response.tutor_telegram_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-TUTOR] add response message to user {add_response.tutor_telegram_id} failed!. Error: {ex}!")
