from typing import List

from AnswerEngine.src.TelegramBot.botStudent import bot_student
from AnswerEngine.src.TelegramBot.botTutor import bot_tutor
from AnswerEngine.src.TelegramBot.keyboards.keyboards import suggest_keyboard
from AnswerEngine.src.logger.logger import logger
from AnswerEngine.src.models.dto_table.dto import NewOrderDto, ResponseDto, SuggestDto, TagChangeDto

from AnswerEngine.src.config.settings import settings

async def proceed_order(order_create: NewOrderDto) -> None:
    message = (
        f"<b>–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: {order_create.order_name}!</b>\n\n"
        "üì© <i>–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–¥–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.</i>"
    )

    try:
        await bot_student.send_message(chat_id=str(order_create.student_id), text=message, parse_mode="html")
        logger.info(f"[NOTIFY-STUDENT] order {order_create.order_id} create to user {order_create.student_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-STUDENT] order {order_create.order_id} create to user {order_create.student_id} failed!. Error: {ex}")


async def proceed_order_to_tutors(order_create: NewOrderDto, tutors_id: List[int]) -> None:
    message = (
        f"<b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–∏–º —Ç–µ–≥–∞–º!: {order_create.order_name}!</b>\n\n"
    )

    for tutor_id in tutors_id:
        try:
            await bot_tutor.send_message(chat_id=str(tutor_id), text=message, parse_mode="html", reply_markup=suggest_keyboard(order_create.order_id))
            logger.info(f"[NOTIFY-TUTOR] order {order_create.order_id} create to user {tutor_id} send!")
        except Exception as ex:
            logger.error(f"[NOTIFY-TUTOR] order {order_create.order_id} create to user {tutor_id} failed!. Error: {ex}")


async def proceed_response(response: ResponseDto) -> None:
    messageStudent = (
        f"<b>–£ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ \"{response.order_name}\" –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫!</b>\n\n"
        "üëÄ <i>–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫ –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.</i>"
    )

    messageTutor = (
        f"<b>–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑ \"{response.order_name}\"!</b>\n\n"
        "‚úÖ <i>–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.</i>"
    )

    try:
        await bot_student.send_message(chat_id=response.student_id, text=messageStudent, parse_mode="html")
        logger.info(f"[NOTIFY-STUDENT] response: {response.response_id} to user: {response.student_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-STUDENT] response: {response.response_id} to user: {response.student_id} failed!. Error: {ex}")

    try:
        await bot_tutor.send_message(chat_id=response.tutor_id, text=messageTutor, parse_mode="html")
        logger.info(f"[NOTIFY-TUTOR] response: {response.response_id} to user: {response.tutor_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-TUTOR] response: {response.response_id} to user: {response.tutor_id} failed!. Error: {ex}")

async def proceed_suggest(suggest_order: SuggestDto) -> None:
    message = (
        f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –≤–∞—Å: {suggest_order.order_name}</b>\n\n"
        f"üëÄ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {suggest_order.description}\n\n"
        f"<b>–ë—é–¥–∂–µ—Ç:</b> {suggest_order.min_price} - {suggest_order.max_price}\n\n"
        "‚ö° <i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
    )

    tutor_id = suggest_order.tutor_telegram_id

    try:
        await bot_tutor.send_message(chat_id=tutor_id, text=message, parse_mode="html", reply_markup=suggest_keyboard(suggest_order.order_id))
        logger.info(f"[NOTIFY-TUTOR] suggest order: {suggest_order.order_id} to user: {suggest_order.tutor_telegram_id} send!")
    except Exception as ex:
        logger.error(f"[NOTIFY-TUTOR] suggest order: {suggest_order.order_id} to user: {suggest_order.tutor_telegram_id} failed!. Error: {ex}!")
